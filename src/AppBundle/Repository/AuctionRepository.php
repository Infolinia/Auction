<?php

namespace AppBundle\Repository;
use AppBundle\Entity\Auction;
use AppBundle\Entity\User;

/**
 * AuctionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AuctionRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @return array
     */
    public function findActiveOrdered()
    {
        return $this->createQueryBuilder("a")
            ->where("a.status = :active")
            ->setParameter("active", Auction::STATUS_ACTIVE)
            ->getQuery()
            ->getResult();
    }

    /**
     * @param User $owner
     *
     * @return array
     */
    public function findMyOrdered(User $owner)
    {
        return $this
            ->getEntityManager()
            ->createQuery(
                "SELECT a
                FROM AppBundle:Auction a
                WHERE a.owner = :owner
                ORDER BY a.expiresAt DESC"
            )
            ->setParameter("owner", $owner)
            ->getResult();
    }

    /**
     * @return array
     */
    public function findActiveExpired()
    {
        return $this->createQueryBuilder("a")
            ->where("a.status = :status")
            ->setParameter("status", Auction::STATUS_ACTIVE)
            ->andWhere("a.expiresAt < :now")
            ->setParameter("now", new \DateTime)
            ->getQuery()
            ->getResult();
    }
    
    /**
     * @param User $user
     * @return array
     */
    public function findMyActiveBids(User $user)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        
        return $qb 
                ->select("a")
                ->from("AppBundle\Entity\Auction","a")
                ->innerJoin("AppBundle\Entity\Offer", "o", "WITH", "a.id = o.auction")
                ->where("o.owner = :owner")
                ->andWhere("a.status = :status")
                ->setParameters(["owner" => $user, "status" => Auction::STATUS_ACTIVE])
                ->getQuery()
                ->getResult();
    }
    
        /**
     * @param User $user
     * @return array
     */
    public function findMyFinishedBids(User $user)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        
        return $qb 
                ->select("a")
                ->from("AppBundle\Entity\Auction","a")
                ->innerJoin("AppBundle\Entity\Offer", "o", "WITH", "a.id = o.auction")
                ->where("o.owner = :owner")
                ->andWhere("a.status = :status or a.status = :status2")
                ->setParameters(["owner" => $user, "status" => Auction::STATUS_FINISHED, "status2" => Auction::STATUS_PAYMENT])
                ->orderBy('a.expiresAt', 'DESC')
                ->getQuery()
                ->getResult();
    }
}
